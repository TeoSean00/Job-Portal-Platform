name: On PR Open

on:
  #everytime a new commit is pushed to PR, this workflow will run
  pull_request:

env:
  NODE_VERSION: "18.x"

# Ensure only a single job or workflow using the same concurrency group will run at a time
# When a concurrent job or workflow is queued, if another job or workflow using the same concurrency group in the repository is in progress,
# the queued job or workflow will be pending.
concurrency:
  group: ${{ github.ref }}-on-pr-open # The branch or tag ref that triggered the workflow run.

jobs:

  PR-notif-telegram:
    runs-on: ubuntu-latest
    steps:
      - name: send telegram message on PR open
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor }} created PR:
            Commit message: ${{ github.event.commits[0].message }}
            
            Repository: ${{ github.repository }}
            
            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
  
  lint-next:
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 5
    steps:
      - name: Check if PR title follows conventional commits specs
        if: ${{ !contains(github.event.pull_request.title, '[Snyk]') }}
        uses: amannn/action-semantic-pull-request@v5.1.0
        env:
          # using github token for external/dependabot PR,
          # personal access tokens in secrets will not be accessible in
          # pipeline for external user PRs
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: |
          npm i
      - name: Lint
        run: npm run lint
      - name: Typecheck
        run: npm run typecheck
      - name: Markdown lint
        run: npm run lint:markdown
  
  build-next:
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: |
          npm ci
      - name: Build
        run: npm run build
  
  unit-test-next:
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/docker/library/ubuntu:latest
    continue-on-error: false
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: |
          npm ci
      - name: Run unit tests
        run: npm run test
  
  lint-fastapi:
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 5
    strategy:
      matrix:
        python-version: ["3.9"]
    env:
      AWS_RDS_MYSQL_URL: ${{ secrets.AWS_RDS_MYSQL_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv
        uses: dschep/install-pipenv-action@v1
      - name: Install dependencies
        run: |
          cd api
          pipenv install --dev
      - name: Lint with flake8
        run: |
          cd api
          pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-fastapi:
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ["3.9"]
    env:
      AWS_RDS_MYSQL_URL: ${{ secrets.AWS_RDS_MYSQL_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv
        uses: dschep/install-pipenv-action@v1
      - name: Install dependencies
        run: |
          pipenv install --dev
      - name: Build FastAPI
        run: |
          pipenv run uvicorn api.main:app &  # Start in background
          sleep 5  # Wait for 5 seconds
          kill $!  # Kill the background process

  unit-test-fastapi:
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ["3.9"]
    env:
      AWS_RDS_MYSQL_URL: ${{ secrets.AWS_RDS_MYSQL_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pipenv
        uses: dschep/install-pipenv-action@v1
      - name: Install dependencies
        run: |
          pipenv install --dev
      - name: Run unit tests
        run: |
          pipenv run pytest .
